version: 2.1

orbs:
  python: circleci/python@2.0.3
  aws-cli: circleci/aws-cli@1.2.1
  aws-s3: circleci/aws-s3@2.0

parameters:
  python-ci-image:
    type: string
    default: "858290205983.dkr.ecr.eu-west-2.amazonaws.com/circleci-devs:latest"

jobs:
  check-product-availability-unit-test:
    docker:
      - image: << pipeline.parameters.python-ci-image >>
      - image: circleci/mongo:4.4.12
    working_directory: ~/project/lambdas/check_product_availability
    steps:
      - run-unit-tests

  pay-order-unit-test:
    docker:
      - image: << pipeline.parameters.python-ci-image >>
      - image: circleci/mongo:4.4.12
    working_directory: ~/project/lambdas/pay-order
    steps:
      - run-unit-tests

  deploy-testing-infrastructures:
    docker:
      - image: << pipeline.parameters.python-ci-image >>
    working_directory: ~/project
    steps:
      - run:
          name: "Deploying testing infrastructure"
          command: |
            echo "export STACK_PREFIX=`echo ${CIRCLE_BRANCH}`" >> $BASH_ENV 

workflows:
  main:
    jobs:
      - check-product-availability-unit-test
      - pay-order-unit-test
      - group-all-unit-testing:
          requires:
            - check-product-availability-unit-test
            - pay-order-unit-test
      - approve-testing-stack-deployment:
          type: approval
          requires:
            - group-all-unit-testing
      - deploy-testing-infrastructures:
          requires:
            - approve-testing-stack-deployment

commands:

  setup-dependencies:
    description: "Install poetry dependencies"
    steps:
      - poetry-authenticate
      - python/install-packages:
          pkg-manager: poetry
          pypi-cache: false
          venv-cache: false

  setup-dev-dependencies:
    description: "Install poetry dependencies with dev"
    steps:
      - python/install-packages:
          args: '--with dev'
          pkg-manager: poetry
          pypi-cache: false
          venv-cache: false

  run-unit-tests:
    description: "Install poetry dependencies and run unit test"
    steps:
      - checkout:
          path: ~/project
      - setup-dev-dependencies
      - run:
          name: Run tests
          command: poetry run pytest test --junit-xml=tests.xml
      - store_test_results:
          path: tests.xml

  deploy-pay-system-stack:
    parameters:
      stack-prefix:
        type: string
    steps:
      - checkout
      - setup-dependencies
      - run:
          name: Build State Machine JSON
          command: |
            poetry run build-all-state-machine-json-files
      - run:
          name: Prepare cloudformation package
          command: |
            poetry run inject-all-state-machine-json
            python ./utils/build_requirements_txt.py
            python ./utils/print_parameters.py
            sam build --template cfn-injected.yml --parallel --build-dir ./state-machine-lambdas
            aws cloudformation package --template-file ./state-machine-lambdas/template.yaml \
            --s3-bucket roberto-devops-payment-system --s3-prefix state-machine --output-template-file cfn_output_payment_state_machine.yml
      - run:
          name: Deploy to Dedicated Feature Stack
          command: |
            export STACK_PREFIX=<<parameters.stack-prefix>>
            aws cloudformation deploy --stack-name "$STACK_PREFIX-payment-state-machine" --region eu-west-2 --template-file cfn_output_payment_state_machine.yml \
            --capabilities CAPABILITY_NAMED_IAM --parameter-overrides $(cat cloudformation/cfn-config/feature-branch-params.txt)

  install-gh-cli:
    description: "Install latest version of gh-cli"
    steps:
      - run:
          name: install git hub cli latest
          command: |
            VERSION=`curl "https://api.github.com/repos/cli/cli/releases/latest" | grep '"tag_name"' | sed -E 's/.*"([^"]+)".*/\1/' | cut -c2-` 
            curl -sSL https://github.com/cli/cli/releases/download/v${VERSION}/gh_${VERSION}_linux_amd64.tar.gz -o gh_${VERSION}_linux_amd64.tar.gz
            tar xvf gh_${VERSION}_linux_amd64.tar.gz
            sudo cp gh_${VERSION}_linux_amd64/bin/gh /usr/bin/
